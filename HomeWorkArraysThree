using System;

namespace HomeWorkF3
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.CursorVisible = false;

            bool isTreasureSearch = true;
            int userPositionsX = 5;
            int userPositionsY = 5;
            int countTreasure = 0;
            char[,] map =
                {
                {'#','#','#','#','#','#','#','#','#','#', },
                {'#',' ',' ',' ',' ',' ',' ',' ',' ','#', },
                {'#',' ',' ',' ',' ','#',' ',' ',' ','#', },
                {'#',' ','&',' ',' ','#',' ',' ',' ','#', },
                {'#',' ',' ',' ',' ','#',' ',' ',' ','#', },
                {'#',' ',' ',' ',' ',' ',' ','&',' ','#', },
                {'#',' ',' ',' ',' ',' ',' ',' ',' ','#', },
                {'#','&',' ','#',' ','#',' ',' ',' ','#', },
                {'#',' ',' ',' ',' ',' ',' ',' ',' ','#', },
                {'#','#','#','#','#','#','#','#','#','#', },
                };
          
            DrawMap(ref map, ref userPositionsX, ref userPositionsY, countTreasure, isTreasureSearch);
        }

        static void DrawCharacter(ref char[,] map, ref int userPositionsX, ref int userPositionsY)
        {
            Console.SetCursorPosition(userPositionsY, userPositionsX);
            Console.Write("@");

            ChangeDirection(ref map, ref userPositionsX, ref userPositionsY);
        }

        static void ChangeDirection(ref char[,] map, ref int userPositionsX, ref int userPositionsY)
        {
            ConsoleKeyInfo charKey = Console.ReadKey();

            switch (charKey.Key)
            {
                case ConsoleKey.UpArrow:
                    MoveUp(ref map, ref userPositionsX, ref userPositionsY);
                    break;

                case ConsoleKey.DownArrow:
                    MoveDown(ref map, ref userPositionsX, ref userPositionsY);
                    break;

                case ConsoleKey.LeftArrow:
                    MoveLeft(ref map, ref userPositionsX, ref userPositionsY);
                    break;

                case ConsoleKey.RightArrow:
                    MoveRight(ref map, ref userPositionsX, ref userPositionsY);
                    break;
            }
        }

        static void MoveUp(ref char[,] map, ref int userPositionsX, ref int userPositionsY)
        {
            if (map[userPositionsX - 1, userPositionsY] != '#')
            {
                userPositionsX--;
            }
        }

        static void MoveDown(ref char[,] map, ref int userPositionsX, ref int userPositionsY)
        {
            if (map[userPositionsX + 1, userPositionsY] != '#')
            {
                userPositionsX++;
            }
        }

        static void MoveLeft(ref char[,] map, ref int userPositionsX, ref int userPositionsY)
        {
            if (map[userPositionsX, userPositionsY - 1] != '#')
            {
                userPositionsY--;
            }
        }

        static void MoveRight(ref char[,] map, ref int userPositionsX, ref int userPositionsY)
        {
            if (map[userPositionsX, userPositionsY + 1] != '#')
            {
                userPositionsY++;
            }
        }

        static void GatherTreasure(ref char[,] map, int userPositionsX, int userPositionsY, ref int countTreasure, ref bool isTreasureSearch)
        {
            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    if (map[i,j] == '&') 
                    {
                        countTreasure++;
                    }
                }
            }
            int tempCountTreasure = countTreasure;

            if (map[userPositionsX, userPositionsY] == '&')
            {
                map[userPositionsX, userPositionsY] = ' ';
            }   

            if (countTreasure == 0)
                isTreasureSearch = false;

            countTreasure = 0;
        }

        static void DrawMap(ref char[,] map, ref int userPositionsX, ref int userPositionsY, int countTreasure, bool isTreasureSearch)
        {
            while (isTreasureSearch)
            {
                for (int i = 0; i < map.GetLength(0); i++)
                {
                    for (int j = 0; j < map.GetLength(1); j++)
                    {
                        Console.Write(map[i, j]);
                    }
                    Console.WriteLine();
                }

                GatherTreasure(ref map, userPositionsX, userPositionsY, ref countTreasure, ref isTreasureSearch);
                DrawCharacter(ref map, ref userPositionsX, ref userPositionsY);
                Console.Clear();
            }
        }
    }
}
