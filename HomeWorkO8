using System;
using System.Collections.Generic;

namespace HomeWork_30
{
    class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();

            arena.AddFighters();
            arena.SelectFighters();
            arena.Fight();
        }

        class Arena
        {
            private List<Fighter> _fighters = new List<Fighter>();
            private Fighter _fighter1;
            private Fighter _fighter2;
            public void Fight()
            {
                if (_fighter1 == null || _fighter2 == null)
                    SelectFighters();

                while (_fighter1.Health > 0 && _fighter2.Health > 0)
                {
                    Console.WriteLine($"{_fighter1.Health} ХП У {_fighter1.Name}");
                    Console.WriteLine($"{_fighter2.Health} ХП У {_fighter2.Name}");

                    _fighter1.Attack(_fighter2);
                    _fighter2.Attack(_fighter1);
                }

                ShowWinners();
            }

            public void SelectFighters()
            {
                ShowFighters();

                Console.WriteLine("1й боец: ");
                if (SelectFighter(out Fighter fighter))
                {
                    _fighter1 = fighter;
                    _fighter1.ShowInfo();
                }

                Console.WriteLine("2й боец: ");
                if (SelectFighter(out Fighter fighter2))
                {
                    if (fighter2 != fighter)
                    {
                        _fighter2 = fighter2;
                        _fighter2.ShowInfo();
                    }
                    else
                    {
                        SelectFighters();
                    }
                }

                Console.ReadKey();
                Console.Clear();
            }

            private bool SelectFighter(out Fighter fighter)
            {
                string id = Console.ReadLine();

                int.TryParse(id, out int inputId);

                if (inputId > 0 && inputId <= _fighters.Count)
                {
                    fighter = _fighters[inputId - 1];
                    return true;
                }
                else
                {
                    fighter = null;
                    return false;
                }
            }

            public void AddFighters()
            {
                _fighters.Add(new Thief("Вор", 600, 50, "Украсть оружие", 10, false));
                _fighters.Add(new Warrior("Воин", 1100, 120, "Блок", 0, true));
                _fighters.Add(new Magician("Маг", 600, 60, "Заморозить", 10, true));
                _fighters.Add(new Nomad("Кочевник", 800, 110, "Крит", 1, true));
                _fighters.Add(new Medic("Медик", 900, 50, "Похитить здоровье", 5, false));
            }

            private void ShowFighters()
            {
                for (int i = 0; i < _fighters.Count; i++)
                {
                    Console.Write(i + 1);
                    _fighters[i].ShowInfo();
                }
            }

            private void ShowWinners()
            {
                if (_fighter1.Health <= 0 && _fighter2.Health <= 0)
                    Console.WriteLine("ничья");
                else if (_fighter2.Health <= 0)
                    Console.WriteLine($"{_fighter1.Name} победил");
                else
                    Console.WriteLine($"{_fighter2.Name} победил");
            }
        }

        class Fighter
        {
            private static Random random = new Random();
            public string Name { get; private set; }
            public int Health { get; protected set; }
            public int Damage { get; protected set; }
            public string SpecialAtackName { get; private set; }
            public int Armor { get; private set; }
            public bool IsWeapon { get; protected set; }
            public int HandDamage { get; protected set; }

            public Fighter(string name, int health, int damage, string specialAtackName, int armor, bool isWeapon)
            {
                Name = name;
                Health = health;
                Damage = damage;
                SpecialAtackName = specialAtackName;
                Armor = armor;
                IsWeapon = isWeapon;
                HandDamage = 50;
            }

            public Fighter() { }

            public void Attack(Fighter fighter)
            {
                fighter.TakeDamage(Damage, IsWeapon);
                UseSpecialAtack(fighter);
            }

            public void TakeDamage(int damage, bool isWeapon)
            {
                if (isWeapon == true)
                    Health -= damage - Armor;
                else
                    Health -= HandDamage - Armor;
            }

            public void ShowInfo()
            {
                Console.WriteLine($"Класс: {Name}   Хп: {Health}   Урон: {Damage}   Броня: {Armor}   Оружие: {IsWeapon}   Навык: {SpecialAtackName}");
            }

            public void TakeWeapon()
            {
                IsWeapon = false;
                Damage = HandDamage;
            }

            public void GiveWeapon(int damage, bool isWeapon)
            {
                if (isWeapon == true)
                {
                    IsWeapon = true;
                    Damage += damage - HandDamage;
                }
            }

            public void Freeze(bool isWeapon)
            {
                if (isWeapon == true)
                {
                    int numberReduceDamage = 2;
                    Damage = Damage / numberReduceDamage;
                }
            }

            public virtual void UseSpecialAtack(Fighter fighter) { }

            public int UseNumberRandom()
            {
                int randomNumber = random.Next(0, 100);
                return randomNumber;
            }
        }

        class Thief : Fighter
        {
            private int _count;

            public Thief(string name, int health, int damage, string specialAtackName, int armor, bool isWeapon) : base(name, health, damage, specialAtackName, armor, isWeapon) { }

            public override void UseSpecialAtack(Fighter fighter)
            {
                int maxPercent = 40;
                int numberAttempts = 0;

                if (UseNumberRandom() <= maxPercent && UseNumberRandom() >= 0 && _count == numberAttempts)
                {
                    _count++;
                    fighter.TakeWeapon();
                    GiveWeapon(fighter.Damage, fighter.IsWeapon);
                    Console.WriteLine("Вор украл оружие");
                }
            }
        }

        class Warrior : Fighter
        {
            public Warrior(string name, int health, int damage, string specialAtackName, int armor, bool isWeapon) : base(name, health, damage, specialAtackName, armor, isWeapon) { }

            public override void UseSpecialAtack(Fighter fighter)
            {
                int maxPercent = 10;

                if (UseNumberRandom() <= maxPercent && UseNumberRandom() >= 0)
                {
                    Console.WriteLine("Воин блокировал удар");
                    Health += fighter.Damage;
                }
            }
        }

        class Magician : Fighter
        {
            private int _count;

            public Magician(string name, int health, int damage, string specialAtackName, int armor, bool isWeapon) : base(name, health, damage, specialAtackName, armor, isWeapon) { }

            public override void UseSpecialAtack(Fighter fighter)
            {
                int maxPercent = 20;
                int numberAttempts = 3;

                if (UseNumberRandom() <= maxPercent && UseNumberRandom() >= 0 && _count <= numberAttempts)
                {
                    _count++;
                    fighter.Freeze(fighter.IsWeapon);
                    Console.WriteLine("Маг использовал заморозку");
                }
            }
        }

        class Nomad : Fighter
        {
            private int _count;

            public Nomad(string name, int health, int damage, string specialAtackName, int armor, bool isWeapon) : base(name, health, damage, specialAtackName, armor, isWeapon) { }

            public override void UseSpecialAtack(Fighter fighter)
            {
                int maxPercent = 10;
                int numberAttempts = 2;

                if (UseNumberRandom() <= maxPercent && UseNumberRandom() >= 0 && _count <= numberAttempts && IsWeapon == true)
                {
                    _count++;
                    fighter.TakeDamage(60, IsWeapon);
                    Console.WriteLine(Name + " ударил дубинкой по голове");

                    if (_count == 2 && IsWeapon == true)
                    {
                        IsWeapon = false;
                        Console.WriteLine($"У {Name} сломалась дубинка ):");
                    }
                }
            }
        }

        class Medic : Fighter
        {
            Random random = new Random();

            public Medic(string name, int health, int damage, string specialAtackName, int armor, bool isWeapon) : base(name, health, damage, specialAtackName, armor, isWeapon) { }

            public override void UseSpecialAtack(Fighter fighter)
            {
                int minStealHealth = 30;
                int maxPercent = 10;
                int countStealHealth = random.Next(minStealHealth, 100);

                if (UseNumberRandom() <= maxPercent && UseNumberRandom() >= 0)
                {
                    Health += countStealHealth;
                    fighter.TakeDamage(countStealHealth, true);
                    Console.WriteLine($"{Name} поглотил {countStealHealth} здоровья");
                }
            }
        }
    }
}
